name: Deploy Auth Service

on:
  push:
    branches: [main]
    paths:
      - 'apps/api/auth-service/**'
      - 'packages/**'
      - '.github/workflows/deploy-auth-service.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - production

concurrency:
  group: deploy-auth-service-${{ github.ref }}
  cancel-in-progress: false

env:
  AWS_REGION: us-east-1
  NODE_VERSION: '20'
  PNPM_VERSION: '9'

jobs:
  deploy:
    name: Deploy Auth Service
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy infrastructure
        run: |
          cd apps/api/auth-service/infrastructure/aws-cdk
          npm install
          npx cdk deploy --require-approval never
        env:
          CDK_DEFAULT_ACCOUNT: ${{ secrets.AWS_ACCOUNT_ID }}
          CDK_DEFAULT_REGION: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: auth-service-${{ github.event.inputs.environment || 'dev' }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build the Docker image
          docker build -f apps/api/auth-service/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          
          # Push the image
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          
          # Tag as latest
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Update ECS service
        run: |
          # Get cluster and service names from CDK outputs
          CLUSTER_NAME=$(aws cloudformation describe-stacks \
            --stack-name AuthServiceStack${{ github.event.inputs.environment || 'dev' }} \
            --query 'Stacks[0].Outputs[?OutputKey==`ClusterName`].OutputValue' \
            --output text)
          
          SERVICE_NAME=$(aws cloudformation describe-stacks \
            --stack-name AuthServiceStack${{ github.event.inputs.environment || 'dev' }} \
            --query 'Stacks[0].Outputs[?OutputKey==`ServiceName`].OutputValue' \
            --output text)
          
          # Force new deployment
          aws ecs update-service \
            --cluster $CLUSTER_NAME \
            --service $SERVICE_NAME \
            --force-new-deployment

      - name: Wait for deployment
        run: |
          CLUSTER_NAME=$(aws cloudformation describe-stacks \
            --stack-name AuthServiceStack${{ github.event.inputs.environment || 'staging' }} \
            --query 'Stacks[0].Outputs[?OutputKey==`ClusterName`].OutputValue' \
            --output text)
          
          SERVICE_NAME=$(aws cloudformation describe-stacks \
            --stack-name AuthServiceStack${{ github.event.inputs.environment || 'staging' }} \
            --query 'Stacks[0].Outputs[?OutputKey==`ServiceName`].OutputValue' \
            --output text)
          
          echo "Waiting for service to stabilize..."
          aws ecs wait services-stable \
            --cluster $CLUSTER_NAME \
            --services $SERVICE_NAME

      - name: Health check
        run: |
          LOAD_BALANCER_DNS=$(aws cloudformation describe-stacks \
            --stack-name AuthServiceStack${{ github.event.inputs.environment || 'staging' }} \
            --query 'Stacks[0].Outputs[?OutputKey==`LoadBalancerDns`].OutputValue' \
            --output text)
          
          echo "Health checking http://$LOAD_BALANCER_DNS/health"
          
          # Wait a bit for the load balancer to be ready
          sleep 60
          
          # Try health check with retries
          for i in {1..5}; do
            if curl -f "http://$LOAD_BALANCER_DNS/health"; then
              echo "Health check passed!"
              exit 0
            fi
            echo "Health check attempt $i failed, retrying in 30s..."
            sleep 30
          done
          
          echo "Health check failed after 5 attempts"
          exit 1
