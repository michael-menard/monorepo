name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans weekly
    - cron: '0 2 * * 1'

jobs:
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.0.0
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Run security audit
        run: pnpm run security:audit
        
      - name: Run security linting
        run: pnpm run security:lint
        
      - name: Test security headers
        run: pnpm run security:headers:test
        
      - name: Run full security scan
        run: pnpm run security:scan

  dependency-check:
    name: Dependency Vulnerability Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.0.0
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Check for vulnerabilities
        run: pnpm audit --audit-level=moderate
        
      - name: Check for outdated packages
        run: pnpm outdated
        
      - name: Check for unused dependencies
        run: npx depcheck --ignores="@types/*,eslint*,prettier*,@storybook/*,storybook,playwright*,@playwright/*"

  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
      
    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript' ]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.0.0
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Build project
        run: pnpm run build
        
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, 'docker') || contains(github.event.head_commit.message, 'container')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [security-audit, dependency-check, codeql-analysis]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.0.0
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Generate security report
        run: |
          echo "# Security Scan Report" > security-report.md
          echo "Generated on: $(date)" >> security-report.md
          echo "" >> security-report.md
          echo "## Security Audit" >> security-report.md
          echo "- Status: ${{ needs.security-audit.result }}" >> security-report.md
          echo "" >> security-report.md
          echo "## Dependency Check" >> security-report.md
          echo "- Status: ${{ needs.dependency-check.result }}" >> security-report.md
          echo "" >> security-report.md
          echo "## CodeQL Analysis" >> security-report.md
          echo "- Status: ${{ needs.codeql-analysis.result }}" >> security-report.md
          
      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.md 