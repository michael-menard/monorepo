name: Setup Branch Protection Rules

# This workflow sets up branch protection rules for the main branch
# It only runs when manually triggered or when this file is modified

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to protect'
        required: true
        default: 'main'
        type: string
  push:
    paths:
      - '.github/workflows/setup-branch-protection.yml'
      - '.github/branch-protection.yml'

jobs:
  setup-branch-protection:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      administration: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Branch Protection Rules
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const branch = '${{ github.event.inputs.branch || 'main' }}';
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            console.log(`Setting up branch protection for ${owner}/${repo}:${branch}`);

            try {
              const protection = {
                required_status_checks: {
                  strict: true,
                  checks: [
                    { context: "Unit Tests" },
                    { context: "Lint & Type Check" },
                    { context: "Build App" },
                    { context: "Security Audit" },
                    { context: "Auggie + CodeRabbit Collaborative Review" },
                    { context: "Quality Gates" }
                  ]
                },
                enforce_admins: false,
                required_pull_request_reviews: {
                  required_approving_review_count: 1,
                  dismiss_stale_reviews: true,
                  require_code_owner_reviews: false,
                  require_last_push_approval: false
                },
                restrictions: null, // No user/team restrictions
                allow_force_pushes: false,
                allow_deletions: false,
                block_creations: false,
                required_linear_history: true
              };

              await github.rest.repos.updateBranchProtection({
                owner,
                repo,
                branch,
                ...protection
              });

              console.log(`✅ Branch protection rules successfully applied to ${branch}`);
              
              // Create a summary
              core.summary
                .addHeading(`Branch Protection Setup Complete`)
                .addRaw(`Successfully configured branch protection rules for <code>${branch}</code> branch.`)
                .addHeading('Protection Rules Applied:')
                .addList([
                  'Require pull request reviews (1 approval required)',
                  'Dismiss stale reviews when new commits are pushed',
                  'Require status checks to pass before merging',
                  'Require branches to be up to date before merging',
                  'Block force pushes',
                  'Block branch deletions',
                  'Require linear history (no merge commits)'
                ])
                .addHeading('Required Status Checks:')
                .addList([
                  'Unit Tests',
                  'Lint & Type Check', 
                  'Build App',
                  'Security Audit',
                  'Auggie + CodeRabbit Collaborative Review',
                  'Quality Gates'
                ])
                .write();

            } catch (error) {
              console.error('❌ Failed to set up branch protection:', error);
              
              if (error.status === 403) {
                core.setFailed('❌ Insufficient permissions. Make sure the GITHUB_TOKEN has admin permissions or run this manually in GitHub Settings > Branches.');
              } else if (error.status === 404) {
                core.setFailed(`❌ Branch '${branch}' not found. Make sure the branch exists before setting up protection.`);
              } else {
                core.setFailed(`❌ Failed to set up branch protection: ${error.message}`);
              }
            }
