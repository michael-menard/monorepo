name: Deploy Changed Projects

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      force_deploy_all:
        description: 'Force deploy all projects (ignore change detection)'
        required: false
        default: false
        type: boolean

concurrency:
  group: deploy-${{ github.ref }}-${{ github.event.inputs.environment || 'staging' }}
  cancel-in-progress: false  # Don't cancel deployments

env:
  AWS_REGION: us-east-1

jobs:
  detect-changes:
    name: Detect Changed Projects
    runs-on: ubuntu-latest
    outputs:
      frontend-changed: ${{ steps.changes.outputs.frontend-changed }}
      auth-service-changed: ${{ steps.changes.outputs.auth-service-changed }}
      lego-api-changed: ${{ steps.changes.outputs.lego-api-changed }}
      packages-changed: ${{ steps.changes.outputs.packages-changed }}
      deploy-matrix: ${{ steps.matrix.outputs.deploy-matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for change detection

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.0.0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Detect changes with Turborepo
        id: changes
        run: |
          echo "Detecting changes since last deployment..."
          
          # Force deploy all if requested
          if [ "${{ github.event.inputs.force_deploy_all }}" = "true" ]; then
            echo "🚀 Force deploy all projects requested"
            echo "frontend-changed=true" >> $GITHUB_OUTPUT
            echo "auth-service-changed=true" >> $GITHUB_OUTPUT
            echo "lego-api-changed=true" >> $GITHUB_OUTPUT
            echo "packages-changed=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Check if frontend or its dependencies changed
          if pnpm turbo build --filter="@repo/lego-moc-instructions-app...[HEAD^1]" --dry-run | grep -q "@repo/lego-moc-instructions-app"; then
            echo "📱 Frontend changes detected"
            echo "frontend-changed=true" >> $GITHUB_OUTPUT
          else
            echo "frontend-changed=false" >> $GITHUB_OUTPUT
          fi
          
          # Check if auth service or its dependencies changed
          if pnpm turbo build --filter="@repo/api-auth-service...[HEAD^1]" --dry-run | grep -q "@repo/api-auth-service"; then
            echo "🔐 Auth service changes detected"
            echo "auth-service-changed=true" >> $GITHUB_OUTPUT
          else
            echo "auth-service-changed=false" >> $GITHUB_OUTPUT
          fi

          # Check if LEGO API or its dependencies changed
          if pnpm turbo build --filter="lego-projects-api...[HEAD^1]" --dry-run | grep -q "lego-projects-api"; then
            echo "🧱 LEGO API changes detected"
            echo "lego-api-changed=true" >> $GITHUB_OUTPUT
          else
            echo "lego-api-changed=false" >> $GITHUB_OUTPUT
          fi
          
          # Check if any packages changed
          if pnpm turbo build --filter="./packages/*...[HEAD^1]" --dry-run | grep -q "packages/"; then
            echo "📦 Package changes detected"
            echo "packages-changed=true" >> $GITHUB_OUTPUT
          else
            echo "packages-changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Create deployment matrix
        id: matrix
        run: |
          MATRIX="[]"
          
          if [ "${{ steps.changes.outputs.frontend-changed }}" = "true" ]; then
            MATRIX=$(echo $MATRIX | jq '. + [{"project": "frontend", "name": "Frontend App", "path": "apps/web/lego-moc-instructions-app"}]')
          fi
          
          if [ "${{ steps.changes.outputs.auth-service-changed }}" = "true" ]; then
            MATRIX=$(echo $MATRIX | jq '. + [{"project": "auth-service", "name": "Auth Service", "path": "apps/api/auth-service"}]')
          fi
          
          if [ "${{ steps.changes.outputs.lego-api-changed }}" = "true" ]; then
            MATRIX=$(echo $MATRIX | jq '. + [{"project": "lego-api", "name": "LEGO Projects API", "path": "apps/api/lego-projects-api"}]')
          fi
          
          echo "deploy-matrix=$MATRIX" >> $GITHUB_OUTPUT
          echo "Deployment matrix: $MATRIX"

  deploy-projects:
    name: Deploy ${{ matrix.name }}
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.deploy-matrix != '[]' && github.event_name == 'push'
    strategy:
      matrix:
        include: ${{ fromJson(needs.detect-changes.outputs.deploy-matrix) }}
      fail-fast: false  # Continue deploying other projects if one fails
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.0.0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Deploy Frontend
        if: matrix.project == 'frontend'
        run: |
          echo "🚀 Deploying Frontend Application"
          
          # Load environment configuration
          ENV_NAME="${{ github.event.inputs.environment || 'staging' }}"
          ENV_FILE=".github/environments/${ENV_NAME}.env"
          
          if [ -f "$ENV_FILE" ]; then
            set -a
            source "$ENV_FILE"
            set +a
            echo "✅ Environment configuration loaded for: $ENV_NAME"
          else
            echo "❌ Environment file not found: $ENV_FILE"
            exit 1
          fi
          
          # Build only the frontend and its dependencies
          echo "📦 Building frontend and dependencies..."
          pnpm turbo build --filter="@repo/lego-moc-instructions-app^..."
          
          # Build the frontend app
          cd apps/web/lego-moc-instructions-app
          VITE_ENVIRONMENT=$ENV_NAME NODE_ENV=production pnpm build
          
          # Deploy infrastructure
          cd infrastructure/aws-cdk
          npm install
          ENVIRONMENT=$ENV_NAME npx cdk deploy --require-approval never
          
          # Deploy to S3
          cd ../..
          aws s3 sync dist/ s3://$S3_BUCKET_NAME --delete
          
          # Invalidate CloudFront
          aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_DISTRIBUTION_ID --paths "/*"
          
          echo "✅ Frontend deployment completed"

      - name: Deploy Auth Service
        if: matrix.project == 'auth-service'
        run: |
          echo "🔐 Deploying Auth Service"
          
          # Build only the auth service and its dependencies
          pnpm turbo build --filter="@repo/api-auth-service^..."
          
          # Deploy auth service infrastructure
          cd apps/api/auth-service/infrastructure/aws-cdk
          npm install
          ENVIRONMENT=${{ github.event.inputs.environment || 'staging' }} npx cdk deploy --require-approval never
          
          echo "✅ Auth Service deployment completed"

      - name: Deploy LEGO API
        if: matrix.project == 'lego-api'
        run: |
          echo "🧱 Deploying LEGO Projects API"
          
          # Build only the LEGO API and its dependencies
          pnpm turbo build --filter="lego-projects-api^..."
          
          # Deploy LEGO API infrastructure
          cd apps/api/lego-projects-api/infrastructure/aws-cdk
          npm install
          ENVIRONMENT=${{ github.event.inputs.environment || 'staging' }} npx cdk deploy --require-approval never
          
          echo "✅ LEGO API deployment completed"

  deployment-summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [detect-changes, deploy-projects]
    if: always()
    steps:
      - name: Create deployment summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ github.event.inputs.environment || 'staging' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          MATRIX='${{ needs.detect-changes.outputs.deploy-matrix }}'
          if [ "$MATRIX" = "[]" ]; then
            echo "### ℹ️ No Changes Detected" >> $GITHUB_STEP_SUMMARY
            echo "No projects required deployment based on change detection." >> $GITHUB_STEP_SUMMARY
          else
            echo "### 📦 Projects Deployed" >> $GITHUB_STEP_SUMMARY
            echo "$MATRIX" | jq -r '.[] | "- **" + .name + "** (" + .project + ")"' >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔍 Change Detection Results" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend: ${{ needs.detect-changes.outputs.frontend-changed }}" >> $GITHUB_STEP_SUMMARY
          echo "- Auth Service: ${{ needs.detect-changes.outputs.auth-service-changed }}" >> $GITHUB_STEP_SUMMARY
          echo "- LEGO API: ${{ needs.detect-changes.outputs.lego-api-changed }}" >> $GITHUB_STEP_SUMMARY
          echo "- Packages: ${{ needs.detect-changes.outputs.packages-changed }}" >> $GITHUB_STEP_SUMMARY
