# CodeRabbit Configuration for React Constructs Monorepo
# This configuration optimizes CodeRabbit for your TypeScript/React monorepo structure

# Language and framework settings
language: typescript

# Review settings
reviews:
  # Enable comprehensive reviews
  auto_review: true

  # Review focus areas
  focus_areas:
    - security
    - performance
    - maintainability
    - best_practices
    - accessibility
    - testing

  # Monorepo-specific settings
  path_filters:
    # Include all TypeScript/JavaScript files
    include:
      - '**/*.ts'
      - '**/*.tsx'
      - '**/*.js'
      - '**/*.jsx'
      - '**/*.json'
      - '**/*.md'
      - '**/*.yaml'
      - '**/*.yml'

    # Exclude generated files and dependencies
    exclude:
      - 'node_modules/**'
      - '**/node_modules/**'
      - 'dist/**'
      - '**/dist/**'
      - 'build/**'
      - '**/build/**'
      - '.next/**'
      - '**/.next/**'
      - 'coverage/**'
      - '**/coverage/**'
      - '*.log'
      - '**/*.log'
      - '.turbo/**'
      - '**/.turbo/**'
      - 'pnpm-lock.yaml'
      - '**/pnpm-lock.yaml'

# Path-based review rules
path_instructions:
  # API services - focus on security and performance
  'apps/api/**':
    - 'Focus on security vulnerabilities and input validation'
    - 'Check for proper error handling and logging'
    - 'Verify API design and performance considerations'

  # Web apps - focus on UX and accessibility
  'apps/web/**':
    - 'Ensure accessibility compliance (WCAG guidelines)'
    - 'Check for React best practices and performance'
    - 'Verify responsive design and user experience'

  # Shared packages - focus on reusability and testing
  'packages/**':
    - 'Ensure proper documentation and API design'
    - 'Check for comprehensive test coverage'
    - 'Verify maintainability and reusability patterns'

# Knowledge base
knowledge_base:
  - 'This is a TypeScript/React monorepo using Turborepo'
  - 'Uses Vite for frontend build tooling'
  - 'Testing with Vitest and Playwright'
  - 'UI components built with Radix UI and Tailwind CSS'
  - 'Authentication migrated to AWS Cognito'
  - 'Focus on accessibility and performance'

# Review instructions
instructions: |
  This is a TypeScript/React monorepo with the following structure:

  - `apps/api/*`: Backend services (LEGO projects API)
  - `apps/web/*`: Frontend applications (React/Vite)
  - `packages/*`: Shared libraries and components

  Key considerations:
  1. Focus on TypeScript best practices and strict typing
  2. Ensure accessibility compliance (WCAG guidelines)
  3. Consider performance implications for React components
  4. Validate security practices, especially in API services
  5. Check for proper error handling and logging
  6. Verify test coverage for new features
  7. Ensure proper documentation for shared packages
  8. Use workspace imports (@repo/*) for cross-package dependencies
  9. Follow React functional component patterns with hooks
  10. Use environment variables for sensitive configuration
