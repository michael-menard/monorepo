version: '3.8'

services:
  # MongoDB for Auth Service
  # Used for user authentication, sessions, and profile data
  mongodb:
    image: mongo:7.0                          # Latest stable MongoDB version
    container_name: mongodb-dev
    restart: unless-stopped                   # Auto-restart on failure, not on reboot
    ports:
      - "27017:27017"                        # Standard MongoDB port
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin      # Default admin user (change for production)
      MONGO_INITDB_ROOT_PASSWORD: password123 # Default password (change for production)
      MONGO_INITDB_DATABASE: myapp           # Default database name
    volumes:
      - mongodb_data:/data/db                # Persistent data storage
      - mongodb_config:/data/configdb        # MongoDB configuration files
    networks:
      - dev-network                          # Connect to shared dev network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"] # Verify DB is responsive
      interval: 10s                          # Check every 10 seconds
      timeout: 5s                           # Wait 5 seconds for response
      retries: 5                            # Try 5 times before marking unhealthy
      start_period: 5s                      # Wait 5 seconds before first check

  # PostgreSQL for LEGO Projects API
  # Primary database for LEGO project data, instructions, and metadata
  postgres:
    image: postgres:15                       # PostgreSQL 15 - stable and feature-rich
    container_name: postgres-dev
    restart: unless-stopped
    environment:
      POSTGRES_DB: lego_projects             # Default database name
      POSTGRES_USER: postgres               # Default superuser (change for production)
      POSTGRES_PASSWORD: password           # Default password (change for production)
    ports:
      - "5432:5432"                         # Standard PostgreSQL port
    volumes:
      - postgres_data:/var/lib/postgresql/data # Persistent database files
    networks:
      - dev-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d lego_projects"] # Check DB accepts connections
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

  # Redis for caching
  # High-performance in-memory cache for API responses and session data
  redis:
    image: redis:7-alpine                    # Alpine version for smaller footprint
    container_name: redis-dev
    restart: unless-stopped
    ports:
      - "6379:6379"                         # Standard Redis port
    volumes:
      - redis_data:/data                    # Persistent cache data (optional)
    command: redis-server --appendonly yes  # Enable persistence
    networks:
      - dev-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]    # Simple ping test
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

  # Elasticsearch for search functionality
  # Full-text search engine for LEGO instructions and project metadata
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.4 # Official Elasticsearch image
    container_name: elasticsearch-dev
    restart: unless-stopped
    environment:
      - discovery.type=single-node          # Single-node cluster for development
      - ES_JAVA_OPTS=-Xms512m -Xmx512m     # Heap size: 512MB min/max (adjust if needed)
      - xpack.security.enabled=false       # Disable security for dev (enable in production)
      - bootstrap.memory_lock=true          # Lock memory to prevent swapping
    ports:
      - "9200:9200"                        # Elasticsearch HTTP API port
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data # Persistent search indices
    networks:
      - dev-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"] # Check cluster health
      interval: 30s                        # Check every 30 seconds (ES is slower to start)
      timeout: 10s
      retries: 5
      start_period: 60s                     # Wait 60 seconds before first check

  # MongoDB Express for database management
  # Web-based MongoDB admin interface
  mongo-express:
    image: mongo-express:1.0.0              # Stable version of Mongo Express
    container_name: mongo-express-dev
    restart: unless-stopped
    ports:
      - "8081:8081"                        # Web interface port
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: password123 # Match MongoDB password
      ME_CONFIG_MONGODB_URL: mongodb://admin:password123@mongodb-dev:27017/ # Use container name
      ME_CONFIG_BASICAUTH: false           # Disable basic auth for dev
    depends_on:
      mongodb:
        condition: service_healthy         # Wait for MongoDB to be healthy
    networks:
      - dev-network

  # pgAdmin for PostgreSQL management
  # Web-based PostgreSQL admin interface
  pgadmin:
    image: dpage/pgadmin4:latest            # Latest pgAdmin version
    container_name: pgadmin-dev
    restart: unless-stopped
    ports:
      - "8082:80"                          # Web interface port
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com # Default login email
      PGADMIN_DEFAULT_PASSWORD: admin      # Default login password
      PGADMIN_CONFIG_SERVER_MODE: 'False'  # Disable server mode for dev
    volumes:
      - pgadmin_data:/var/lib/pgadmin      # Persistent pgAdmin configuration
    depends_on:
      postgres:
        condition: service_healthy         # Wait for PostgreSQL to be healthy
    networks:
      - dev-network

# Persistent volumes for data storage
volumes:
  mongodb_data:                            # MongoDB database files
    driver: local
  mongodb_config:                          # MongoDB configuration files
    driver: local
  postgres_data:                           # PostgreSQL database files
    driver: local
  redis_data:                              # Redis cache data (optional persistence)
    driver: local
  elasticsearch_data:                      # Elasticsearch indices and data
    driver: local
  pgadmin_data:                            # pgAdmin configuration and settings
    driver: local

# Custom Docker network for external services
# Allows services to communicate using container names as hostnames
networks:
  dev-network:
    driver: bridge                         # Standard bridge network driver
    name: dev-external-services            # Custom network name for clarity