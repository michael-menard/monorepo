{
	"Refactor the image Gallery Package": {
		"id": 260,
		"title": "Refactor the image Gallery Package",
		"description": "As a lead Senior Developer I want to refactor the image Gallery Package to be more modular and reusable",
		"status": "ready",
		"priority": "high",
		"dependencies": [
			"47"
		],
		"details": "use the included code snippet as a guide to refactor the image Gallery Package",
		"testStrategy": "Test card display, interactions, and responsive layout",
		"tag": "frontend-ui-development",
		"techStack": [
			"ESNext",
			"React",
			"Vite",
			"Zod",
			"Vitest",
			"MSW",
			"Testing Library",
			"TanStack Start"
		],
		"codeExample": "import { z } from 'zod';\nimport React from 'react';\n\n// Base GalleryCard schema\nconst GalleryCardSchema = z.object({\n  imageUrl: z.string().url(),\n  title: z.string().min(1),\n});\n\n// MocInstructionCard extends GalleryCard\nconst MocInstructionCardSchema = GalleryCardSchema.extend({\n  instructions: z.string().min(1),\n  difficulty: z.enum(['beginner', 'intermediate', 'advanced']),\n  pieceCount: z.number().min(1),\n});\n\n// InspirationGalleryCard extends GalleryCard  \nconst InspirationGalleryCardSchema = GalleryCardSchema.extend({\n  description: z.string(),\n  tags: z.array(z.string()),\n  author: z.string().optional(),\n});\n\n// Extract the TypeScript types\ntype GalleryCard = z.infer<typeof GalleryCardSchema>;\ntype MocInstructionCard = z.infer<typeof MocInstructionCardSchema>;\ntype InspirationGalleryCard = z.infer<typeof InspirationGalleryCardSchema>;\n\n// Gallery component props with generic constraint\ninterface GalleryProps<T extends GalleryCard> {\n  items: T | T[]; // Single item or array (album)\n  renderItem: (item: T) => React.ReactNode;\n  className?: string;\n}\n\nfunction Gallery<T extends GalleryCard>({ \n  items, \n  renderItem, \n  className \n}: GalleryProps<T>) {\n  const isAlbum = Array.isArray(items);\n  const displayItem = isAlbum ? items[0] : items;\n  const previewItems = isAlbum ? items.slice(0, 3) : [items];\n  const totalCount = isAlbum ? items.length : 1;\n  \n  return (\n    <div className={`relative ${className}`}>\n      <div className=\"relative mb-3 mr-3\">\n        {previewItems.map((item, index) => (\n          <div\n            key={index}\n            className={`\n              bg-white rounded-lg shadow-md overflow-hidden border border-gray-200\n              ${index === 0 ? 'relative z-30' : 'absolute'}\n              ${index === 1 ? 'z-20 translate-x-1 translate-y-1 w-[calc(100%-4px)]' : ''}\n              ${index === 2 ? 'z-10 translate-x-2 translate-y-2 w-[calc(100%-8px)]' : ''}\n            `}\n          >\n            <img \n              src={item.imageUrl} \n              alt={item.title}\n              className=\"w-full h-48 object-cover\"\n            />\n            {index === 0 && (\n              <div className=\"p-4\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <h3 className=\"font-semibold text-lg\">{displayItem.title}</h3>\n                  {isAlbum && (\n                    <span className=\"text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded-full font-medium\">\n                      {totalCount} items\n                    </span>\n                  )}\n                </div>\n                {renderItem(displayItem)}\n              </div>\n            )}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\n// Usage examples:\n\n// Sample data\nconst singleMocInstruction: MocInstructionCard = {\n  imageUrl: \"https://example.com/castle.jpg\",\n  title: \"Medieval Castle\",\n  instructions: \"Build this amazing castle with detailed battlements and towers\",\n  difficulty: \"advanced\",\n  pieceCount: 2847\n};\n\nconst mocInstructionAlbum: MocInstructionCard[] = [\n  {\n    imageUrl: \"https://example.com/castle.jpg\",\n    title: \"Castle Collection\",\n    instructions: \"Medieval castle with battlements\",\n    difficulty: \"advanced\",\n    pieceCount: 2847\n  },\n  {\n    imageUrl: \"https://example.com/fortress.jpg\", \n    title: \"Mountain Fortress\",\n    instructions: \"Fortress built into mountainside\",\n    difficulty: \"intermediate\",\n    pieceCount: 1856\n  },\n  {\n    imageUrl: \"https://example.com/tower.jpg\",\n    title: \"Wizard Tower\", \n    instructions: \"Tall mystical tower with spiral stairs\",\n    difficulty: \"beginner\",\n    pieceCount: 645\n  }\n];\n\nconst singleInspiration: InspirationGalleryCard = {\n  imageUrl: \"https://example.com/spaceship.jpg\",\n  title: \"Custom Spaceship\",\n  description: \"A sleek futuristic design inspired by sci-fi movies\",\n  tags: [\"spaceship\", \"sci-fi\", \"custom\"],\n  author: \"BrickMaster3000\"\n};\n\nconst inspirationAlbum: InspirationGalleryCard[] = [\n  {\n    imageUrl: \"https://example.com/spaceship.jpg\",\n    title: \"Sci-Fi Collection\",\n    description: \"Various spacecraft designs\",\n    tags: [\"spaceship\", \"sci-fi\", \"collection\"],\n    author: \"BrickMaster3000\"\n  },\n  {\n    imageUrl: \"https://example.com/fighter.jpg\",\n    title: \"Star Fighter\",\n    description: \"Compact single-pilot fighter\",\n    tags: [\"fighter\", \"sci-fi\"],\n    author: \"BrickMaster3000\"\n  }\n];",
		"rules": [
			"Use Zod schemas over TypeScript interfaces",
			"unit tests shouldbe written with vitest as the runner",
			"use Typescript generics to make the component more reusable",
			"All external dependencies must be mocked in tests.",
			"Use 'pnpm vitest run' as the standard test command. Avoid 'vitest' or 'vitest --watch'."
		],
		"constraints": [
			"you are an experienced senior developer in the field of Full Stack development and Typescript",
			"use zod to generate a base type for the GalleryCard",
			"extend the zod type to generate a type for the MocInstructionCard",
			"extend the zod type to generate a type for the InspirationGalleryCard",
			"the updated gallery should support individual items and albums",
			"you are allowed to use the code snippet as a guide to refactor the image Gallery Package",
			"the component should have unit tests",
			"the component should have ux tests",
			"the component should have proformance tests",
			"the component should have security tests",
			"the component should have accesssability tests",
			"the component should have true end to end tests using playwright and no mocking",
			"Avoid TypeScript interfaces; prefer Zod + types",
			"No NodeNext",
			"Do not use watch flags in test scripts; tests should run once and exit.",
			"All test scripts in package.json must run 'pnpm vitest run' — no watch mode or persistent runners."
		],
		"infra": {
			"ci": "GitHub Actions with git hooks for lint/test/pre-push",
			"hosting": "Serverless Framework",
			"db": "Depends on app (e.g., PostgreSQL, Supabase)",
			"cdn": "Cloudflare or Vercel Assets"
		},
		"metrics": [
			"CI pipeline green on all branches",
			"95%+ test coverage",
			"Lighthouse score > 90",
			"No unused dependencies or exports"
		],
		"tags": [],
		"blockedBy": []
	},


	"Implement code splitting and bundle optimization (Step 1 of 3)": {
		"id": 890,
		"title": "Optimize bundle size and code splitting",
		"description": "Implement code splitting and bundle optimization (Step 1 of 3)",
		"status": "ready",
		"priority": "medium",
		"dependencies": [
			"5"
		],
		"details": "Set up lazy loading, route-based code splitting, and bundle analysis to optimize loading performance",
		"testStrategy": "Analyze bundle size, loading performance, and chunk optimization",
		"tag": "frontend-ui-development",
		"techStack": [
			"ESNext",
			"React",
			"Vite",
			"Zod",
			"Vitest",
			"MSW",
			"Testing Library",
			"TanStack Start"
		],
		"relatedFiles": [],
		"pointers": [],
		"rules": [
			"All apps must use ESNext module resolution (not NodeNext)",
			"React apps must use TanStack Start",
			"Use Zod schemas over TypeScript interfaces",
			"All apps must be compatible with serverless framework",
			"All external dependencies must be mocked in tests.",
			"Use 'pnpm vitest run' as the standard test command. Avoid 'vitest' or 'vitest --watch'."
		],
		"constraints": [
			"Avoid TypeScript interfaces; prefer Zod + types",
			"No NodeNext",
			"Do not use watch flags in test scripts; tests should run once and exit.",
			"All test scripts in package.json must run 'pnpm vitest run' — no watch mode or persistent runners."
		],
		"infra": {
			"ci": "GitHub Actions with git hooks for lint/test/pre-push",
			"hosting": "Serverless Framework",
			"db": "Depends on app (e.g., PostgreSQL, Supabase)",
			"cdn": "Cloudflare or Vercel Assets"
		},
		"metrics": [
			"CI pipeline green on all branches",
			"95%+ test coverage",
			"Lighthouse score > 90",
			"No unused dependencies or exports"
		],
		"tags": [],
		"blockedBy": []
	},
	"Create toast notifications for user feedback (Step 1 of 3)": {
		"id": 560,
		"title": "Implement toast notification system",
		"description": "Create toast notifications for user feedback (Step 1 of 3)",
		"status": "ready",
		"priority": "medium",
		"dependencies": [
			"4"
		],
		"details": "Build toast notification system for success, error, and info messages with proper positioning and timing",
		"testStrategy": "Test toast display, timing, positioning, and accessibility",
		"tag": "frontend-ui-development",
		"techStack": [
			"ESNext",
			"React",
			"Vite",
			"Zod",
			"Vitest",
			"MSW",
			"Testing Library",
			"TanStack Start"
		],
		"relatedFiles": [],
		"pointers": [],
		"rules": [
			"All apps must use ESNext module resolution (not NodeNext)",
			"React apps must use TanStack Start",
			"Use Zod schemas over TypeScript interfaces",
			"All apps must be compatible with serverless framework",
			"All external dependencies must be mocked in tests.",
			"Use 'pnpm vitest run' as the standard test command. Avoid 'vitest' or 'vitest --watch'."
		],
		"constraints": [
			"Avoid TypeScript interfaces; prefer Zod + types",
			"No NodeNext",
			"Do not use watch flags in test scripts; tests should run once and exit.",
			"All test scripts in package.json must run 'pnpm vitest run' — no watch mode or persistent runners."
		],
		"infra": {
			"ci": "GitHub Actions with git hooks for lint/test/pre-push",
			"hosting": "Serverless Framework",
			"db": "Depends on app (e.g., PostgreSQL, Supabase)",
			"cdn": "Cloudflare or Vercel Assets"
		},
		"metrics": [
			"CI pipeline green on all branches",
			"95%+ test coverage",
			"Lighthouse score > 90",
			"No unused dependencies or exports"
		],
		"tags": [],
		"blockedBy": []
	},
	"Set up deployment pipeline for all packages (Step 1 of 3)": {
		"id": 1310,
		"title": "Create deployment configuration",
		"description": "Set up deployment pipeline for all packages (Step 1 of 3)",
		"status": "ready",
		"priority": "medium",
		"dependencies": [
			"81"
		],
		"details": "Configure CI/CD pipeline with automated testing, building, and deployment",
		"testStrategy": "Test deployment pipeline and verify successful deployments",
		"tag": "frontend-ui-development",
		"techStack": [
			"ESNext",
			"React",
			"Vite",
			"Zod",
			"Vitest",
			"MSW",
			"Testing Library",
			"TanStack Start"
		],
		"relatedFiles": [],
		"pointers": [],
		"rules": [
			"All apps must use ESNext module resolution (not NodeNext)",
			"React apps must use TanStack Start",
			"Use Zod schemas over TypeScript interfaces",
			"All apps must be compatible with serverless framework",
			"All external dependencies must be mocked in tests.",
			"Use 'pnpm vitest run' as the standard test command. Avoid 'vitest' or 'vitest --watch'."
		],
		"constraints": [
			"Avoid TypeScript interfaces; prefer Zod + types",
			"No NodeNext",
			"Do not use watch flags in test scripts; tests should run once and exit.",
			"All test scripts in package.json must run 'pnpm vitest run' — no watch mode or persistent runners."
		],
		"infra": {
			"ci": "GitHub Actions with git hooks for lint/test/pre-push",
			"hosting": "Serverless Framework",
			"db": "Depends on app (e.g., PostgreSQL, Supabase)",
			"cdn": "Cloudflare or Vercel Assets"
		},
		"metrics": [
			"CI pipeline green on all branches",
			"95%+ test coverage",
			"Lighthouse score > 90",
			"No unused dependencies or exports"
		],
		"tags": [],
		"blockedBy": []
	}
}