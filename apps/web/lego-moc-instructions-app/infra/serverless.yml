service: lego-moc-instructions-app

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs20.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  memorySize: 512
  timeout: 30
  logRetentionInDays: 14
  
  # Environment variables for all functions
  environment:
    STAGE: ${self:provider.stage}
    REGION: ${self:provider.region}
    NODE_ENV: ${self:provider.stage}
    
  # IAM role statements
  iam:
    role:
      statements:
        # S3 permissions for file uploads and static hosting
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:PutObject
            - s3:DeleteObject
            - s3:ListBucket
          Resource:
            - arn:aws:s3:::${self:service}-${self:provider.stage}-uploads/*
            - arn:aws:s3:::${self:service}-${self:provider.stage}-uploads
            - arn:aws:s3:::${self:service}-${self:provider.stage}-static/*
            - arn:aws:s3:::${self:service}-${self:provider.stage}-static
        
        # CloudFront permissions
        - Effect: Allow
          Action:
            - cloudfront:CreateInvalidation
            - cloudfront:GetInvalidation
            - cloudfront:ListInvalidations
          Resource: "*"
        
        # SES permissions for email sending
        - Effect: Allow
          Action:
            - ses:SendEmail
            - ses:SendRawEmail
          Resource: "*"
        
        # Secrets Manager permissions
        - Effect: Allow
          Action:
            - secretsmanager:GetSecretValue
          Resource: 
            - arn:aws:secretsmanager:${self:provider.region}:*:secret:${self:service}-${self:provider.stage}-*
        
        # Parameter Store permissions
        - Effect: Allow
          Action:
            - ssm:GetParameter
            - ssm:GetParameters
            - ssm:GetParametersByPath
          Resource: 
            - arn:aws:ssm:${self:provider.region}:*:parameter/${self:service}-${self:provider.stage}-*

  # VPC configuration (if needed for RDS/ElastiCache)
  vpc:
    securityGroupIds:
      - sg-xxxxxxxxxxxxxxxxx  # Replace with actual security group
    subnetIds:
      - subnet-xxxxxxxxxxxxxxxxx  # Replace with actual subnet IDs
      - subnet-yyyyyyyyyyyyyyyyy

  # Tags for all resources
  tags:
    Service: ${self:service}
    Environment: ${self:provider.stage}
    ManagedBy: Serverless

# Custom variables
custom:
  # Stage-specific configurations
  stages:
    dev:
      domain: dev.lego-moc-instructions.com
      certificateArn: arn:aws:acm:us-east-1:123456789012:certificate/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
      apiBaseUrl: https://api.dev.lego-moc-instructions.com
    staging:
      domain: staging.lego-moc-instructions.com
      certificateArn: arn:aws:acm:us-east-1:123456789012:certificate/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
      apiBaseUrl: https://api.staging.lego-moc-instructions.com
    prod:
      domain: lego-moc-instructions.com
      certificateArn: arn:aws:acm:us-east-1:123456789012:certificate/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
      apiBaseUrl: https://api.lego-moc-instructions.com
  
  # Current stage configuration
  currentStage: ${self:custom.stages.${self:provider.stage}}
  
  # S3 bucket names
  s3Buckets:
    static: ${self:service}-${self:provider.stage}-static
    uploads: ${self:service}-${self:provider.stage}-uploads
    logs: ${self:service}-${self:provider.stage}-logs
  
  # CloudFront distribution settings
  cloudFront:
    priceClass: PriceClass_100  # Use only North America and Europe
    defaultRootObject: index.html
    errorPages:
      - ErrorCode: 403
        ResponseCode: 200
        ResponsePagePath: /index.html
      - ErrorCode: 404
        ResponseCode: 200
        ResponsePagePath: /index.html

# Resources
resources:
  Resources:
    # S3 Bucket for static website hosting
    StaticWebsiteBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.s3Buckets.static}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders: ['*']
              AllowedMethods: [GET, HEAD]
              AllowedOrigins: ['*']
              MaxAge: 3000
        LifecycleConfiguration:
          Rules:
            - Id: DeleteOldVersions
              Status: Enabled
              NoncurrentVersionExpiration:
                NoncurrentDays: 30
        VersioningConfiguration:
          Status: Enabled
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
        Tags:
          - Key: Name
            Value: ${self:service}-static-${self:provider.stage}
          - Key: Environment
            Value: ${self:provider.stage}

    # S3 Bucket for file uploads
    UploadsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.s3Buckets.uploads}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders: ['*']
              AllowedMethods: [GET, PUT, POST, DELETE, HEAD]
              AllowedOrigins: ['*']
              MaxAge: 3000
        LifecycleConfiguration:
          Rules:
            - Id: DeleteIncompleteUploads
              Status: Enabled
              AbortIncompleteMultipartUpload:
                DaysAfterInitiation: 7
            - Id: DeleteOldVersions
              Status: Enabled
              NoncurrentVersionExpiration:
                NoncurrentDays: 30
        VersioningConfiguration:
          Status: Enabled
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
        Tags:
          - Key: Name
            Value: ${self:service}-uploads-${self:provider.stage}
          - Key: Environment
            Value: ${self:provider.stage}

    # S3 Bucket for logs
    LogsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.s3Buckets.logs}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
        LifecycleConfiguration:
          Rules:
            - Id: DeleteOldLogs
              Status: Enabled
              ExpirationInDays: 90
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
        Tags:
          - Key: Name
            Value: ${self:service}-logs-${self:provider.stage}
          - Key: Environment
            Value: ${self:provider.stage}

    # CloudFront Distribution for static website
    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Comment: ${self:service} static website distribution
          Origins:
            - Id: S3Origin
              DomainName: !GetAtt StaticWebsiteBucket.RegionalDomainName
              S3OriginConfig:
                OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}'
            - Id: ApiGatewayOrigin
              DomainName: !Sub '${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com'
              CustomOriginConfig:
                HTTPPort: 443
                HTTPSPort: 443
                OriginProtocolPolicy: https-only
              OriginPath: /${self:provider.stage}
          Enabled: true
          DefaultRootObject: index.html
          DefaultCacheBehavior:
            TargetOriginId: S3Origin
            ViewerProtocolPolicy: redirect-to-https
            Compress: true
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
            CachedMethods:
              - GET
              - HEAD
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: none
            MinTTL: 0
            DefaultTTL: 86400
            MaxTTL: 31536000
          CacheBehaviors:
            - PathPattern: /api/*
              TargetOriginId: ApiGatewayOrigin
              ViewerProtocolPolicy: redirect-to-https
              AllowedMethods:
                - GET
                - POST
                - PUT
                - DELETE
                - HEAD
                - OPTIONS
              CachedMethods:
                - GET
                - HEAD
              ForwardedValues:
                QueryString: true
                Headers:
                  - Authorization
                  - Content-Type
                  - X-Requested-With
                Cookies:
                  Forward: all
              MinTTL: 0
              DefaultTTL: 0
              MaxTTL: 0
            - PathPattern: /uploads/*
              TargetOriginId: S3Origin
              ViewerProtocolPolicy: redirect-to-https
              AllowedMethods:
                - GET
                - HEAD
                - OPTIONS
              CachedMethods:
                - GET
                - HEAD
              ForwardedValues:
                QueryString: false
                Cookies:
                  Forward: none
              MinTTL: 0
              DefaultTTL: 86400
              MaxTTL: 31536000
          ErrorPages:
            - ErrorCode: 403
              ResponseCode: 200
              ResponsePagePath: /index.html
            - ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /index.html
          PriceClass: PriceClass_100
          Logging:
            Bucket: !Sub '${LogsBucket}.s3.amazonaws.com'
            IncludeCookies: false
            Prefix: cloudfront/
          Aliases:
            - ${self:custom.currentStage.domain}
          ViewerCertificate:
            AcmCertificateArn: ${self:custom.currentStage.certificateArn}
            SslSupportMethod: sni-only
            MinimumProtocolVersion: TLSv1.2_2021

    # CloudFront Origin Access Identity
    CloudFrontOriginAccessIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: ${self:service} origin access identity

    # S3 Bucket Policy for CloudFront access
    StaticWebsiteBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref StaticWebsiteBucket
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId
              Action: s3:GetObject
              Resource: !Sub '${StaticWebsiteBucket}/*'

    # API Gateway
    ApiGatewayRestApi:
      Type: AWS::ApiGateway::RestApi
      Properties:
        Name: ${self:service}-api-${self:provider.stage}
        Description: API Gateway for ${self:service}
        EndpointConfiguration:
          Types:
            - REGIONAL
        BinaryMediaTypes:
          - '*/*'

    # API Gateway Deployment
    ApiGatewayDeployment:
      Type: AWS::ApiGateway::Deployment
      DependsOn:
        - ApiGatewayMethod
      Properties:
        RestApiId: !Ref ApiGatewayRestApi
        StageName: ${self:provider.stage}

    # API Gateway Resource
    ApiGatewayResource:
      Type: AWS::ApiGateway::Resource
      Properties:
        RestApiId: !Ref ApiGatewayRestApi
        ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
        PathPart: '{proxy+}'

    # API Gateway Method
    ApiGatewayMethod:
      Type: AWS::ApiGateway::Method
      Properties:
        RestApiId: !Ref ApiGatewayRestApi
        ResourceId: !Ref ApiGatewayResource
        HttpMethod: ANY
        AuthorizationType: NONE
        RequestParameters:
          method.request.path.proxy: true
        Integration:
          Type: HTTP_PROXY
          IntegrationHttpMethod: ANY
          Uri: !Sub 'http://${ApiGatewayVpcLink}/api/{proxy}'
          RequestParameters:
            integration.request.path.proxy: method.request.path.proxy

    # VPC Link for API Gateway to connect to private resources
    ApiGatewayVpcLink:
      Type: AWS::ApiGateway::VpcLink
      Properties:
        Name: ${self:service}-vpc-link-${self:provider.stage}
        TargetArns:
          - !Sub 'arn:aws:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:loadbalancer/net/${self:service}-alb-${self:provider.stage}/*'

    # Application Load Balancer
    ApplicationLoadBalancer:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        Name: ${self:service}-alb-${self:provider.stage}
        Scheme: internet-facing
        Type: application
        Subnets:
          - subnet-xxxxxxxxxxxxxxxxx  # Replace with public subnet IDs
          - subnet-yyyyyyyyyyyyyyyyy
        SecurityGroups:
          - sg-xxxxxxxxxxxxxxxxx  # Replace with security group ID
        LoadBalancerAttributes:
          - Key: idle_timeout.timeout_seconds
            Value: '60'
          - Key: access_logs.s3.enabled
            Value: 'true'
          - Key: access_logs.s3.bucket
            Value: !Ref LogsBucket
          - Key: access_logs.s3.prefix
            Value: alb/

    # ALB Target Group
    AlbTargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        Name: ${self:service}-tg-${self:provider.stage}
        Port: 3000
        Protocol: HTTP
        VpcId: vpc-xxxxxxxxxxxxxxxxx  # Replace with VPC ID
        TargetType: ip
        HealthCheckPath: /health
        HealthCheckIntervalSeconds: 30
        HealthCheckTimeoutSeconds: 5
        HealthyThresholdCount: 2
        UnhealthyThresholdCount: 3

    # ALB Listener
    AlbListener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        LoadBalancerArn: !Ref ApplicationLoadBalancer
        Port: 80
        Protocol: HTTP
        DefaultActions:
          - Type: forward
            TargetGroupArn: !Ref AlbTargetGroup

    # Route 53 Hosted Zone (if not exists)
    HostedZone:
      Type: AWS::Route53::HostedZone
      Properties:
        Name: ${self:custom.currentStage.domain}
        HostedZoneConfig:
          Comment: Hosted zone for ${self:service}

    # Route 53 A Record for CloudFront
    CloudFrontAliasRecord:
      Type: AWS::Route53::RecordSet
      Properties:
        HostedZoneId: !Ref HostedZone
        Name: ${self:custom.currentStage.domain}
        Type: A
        AliasTarget:
          DNSName: !GetAtt CloudFrontDistribution.DomainName
          HostedZoneId: Z2FDTNDATAQYW2  # CloudFront hosted zone ID

    # Route 53 A Record for API
    ApiAliasRecord:
      Type: AWS::Route53::RecordSet
      Properties:
        HostedZoneId: !Ref HostedZone
        Name: api.${self:custom.currentStage.domain}
        Type: A
        AliasTarget:
          DNSName: !Sub '${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com'
          HostedZoneId: !Sub '${AWS::Region == "us-east-1" ? "Z1UJRXOUMOOFQ8" : "Z2OJLYMUO9EFXC"}'

    # WAF Web ACL for security
    WafWebAcl:
      Type: AWS::WAFv2::WebACL
      Properties:
        Name: ${self:service}-web-acl-${self:provider.stage}
        Description: Web ACL for ${self:service}
        Scope: REGIONAL
        DefaultAction:
          Allow: {}
        Rules:
          - Name: RateLimitRule
            Priority: 1
            Statement:
              RateBasedStatement:
                Limit: 2000
                AggregateKeyType: IP
            Action:
              Block: {}
            VisibilityConfig:
              SampledRequestsEnabled: true
              CloudWatchMetricsEnabled: true
              MetricName: RateLimitRule
        VisibilityConfig:
          SampledRequestsEnabled: true
          CloudWatchMetricsEnabled: true
          MetricName: ${self:service}-web-acl-${self:provider.stage}

    # WAF Association with CloudFront
    WafCloudFrontAssociation:
      Type: AWS::WAFv2::WebACLAssociation
      Properties:
        ResourceArn: !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}'
        WebACLArn: !Ref WafWebAcl

    # Secrets Manager for sensitive data
    DatabaseSecret:
      Type: AWS::SecretsManager::Secret
      Properties:
        Name: ${self:service}-${self:provider.stage}-database
        Description: Database credentials for ${self:service}
        SecretString: !Sub |
          {
            "username": "admin",
            "password": "{{resolve:secretsmanager:${self:service}-${self:provider.stage}-database-password}}",
            "engine": "postgres",
            "host": "{{resolve:secretsmanager:${self:service}-${self:provider.stage}-database-host}}",
            "port": 5432,
            "dbname": "${self:service}_${self:provider.stage}"
          }

    # Parameter Store for configuration
    AppConfigParameter:
      Type: AWS::SSM::Parameter
      Properties:
        Name: /${self:service}/${self:provider.stage}/config
        Type: String
        Value: !Sub |
          {
            "apiBaseUrl": "${self:custom.currentStage.apiBaseUrl}",
            "environment": "${self:provider.stage}",
            "region": "${self:provider.region}",
            "s3Bucket": "${self:custom.s3Buckets.uploads}",
            "cloudFrontDomain": "${self:custom.currentStage.domain}"
          }
        Description: Application configuration for ${self:service}

    # CloudWatch Log Group
    CloudWatchLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: /aws/lambda/${self:service}-${self:provider.stage}
        RetentionInDays: 14

  Outputs:
    # CloudFront Distribution Domain
    CloudFrontDomain:
      Description: CloudFront Distribution Domain Name
      Value: !GetAtt CloudFrontDistribution.DomainName
      Export:
        Name: ${self:service}-${self:provider.stage}-cloudfront-domain

    # CloudFront Distribution ID
    CloudFrontDistributionId:
      Description: CloudFront Distribution ID
      Value: !Ref CloudFrontDistribution
      Export:
        Name: ${self:service}-${self:provider.stage}-cloudfront-id

    # S3 Static Website Bucket
    StaticWebsiteBucket:
      Description: S3 Bucket for static website hosting
      Value: !Ref StaticWebsiteBucket
      Export:
        Name: ${self:service}-${self:provider.stage}-static-bucket

    # S3 Uploads Bucket
    UploadsBucket:
      Description: S3 Bucket for file uploads
      Value: !Ref UploadsBucket
      Export:
        Name: ${self:service}-${self:provider.stage}-uploads-bucket

    # API Gateway URL
    ApiGatewayUrl:
      Description: API Gateway URL
      Value: !Sub 'https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${self:provider.stage}'
      Export:
        Name: ${self:service}-${self:provider.stage}-api-url

    # Application Load Balancer DNS
    AlbDns:
      Description: Application Load Balancer DNS Name
      Value: !GetAtt ApplicationLoadBalancer.DNSName
      Export:
        Name: ${self:service}-${self:provider.stage}-alb-dns

    # Route 53 Hosted Zone ID
    HostedZoneId:
      Description: Route 53 Hosted Zone ID
      Value: !Ref HostedZone
      Export:
        Name: ${self:service}-${self:provider.stage}-hosted-zone-id

# Functions (if needed for server-side functionality)
functions:
  # Health check function
  healthCheck:
    handler: src/functions/health.handler
    events:
      - http:
          path: /health
          method: get
          cors: true

  # File upload function
  fileUpload:
    handler: src/functions/upload.handler
    events:
      - http:
          path: /api/upload
          method: post
          cors: true
    environment:
      UPLOADS_BUCKET: ${self:custom.s3Buckets.uploads}

  # Image optimization function
  imageOptimization:
    handler: src/functions/image-optimization.handler
    events:
      - http:
          path: /api/optimize-image
          method: post
          cors: true
    environment:
      UPLOADS_BUCKET: ${self:custom.s3Buckets.uploads}

  # Cache invalidation function
  cacheInvalidation:
    handler: src/functions/cache-invalidation.handler
    events:
      - http:
          path: /api/invalidate-cache
          method: post
          cors: true
    environment:
      CLOUDFRONT_DISTRIBUTION_ID: !Ref CloudFrontDistribution

# Plugins
plugins:
  - serverless-offline
  - serverless-dotenv-plugin
  - serverless-webpack
  - serverless-domain-manager

# Package configuration
package:
  patterns:
    - '!node_modules/**'
    - '!tests/**'
    - '!docs/**'
    - '!*.md'
    - '!.git/**'
    - '!.vscode/**'
    - '!coverage/**'
    - '!test-results/**'
    - '!playwright-report/**'
    - '!dist/**'
    - '!dev-dist/**' 