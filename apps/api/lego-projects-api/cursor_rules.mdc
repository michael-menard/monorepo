- **Always mock all external dependencies in tests**
  - **Database connections must be mocked**
    - Never connect to a real database in unit or integration tests.
    - Use mocking frameworks (e.g., vi.mock, jest.mock) to replace database modules (e.g., `db`, ORM clients) with fakes or stubs.
    - Example:
      ```typescript
      // ✅ DO: Mock the database client
      vi.mock('../db/client', () => ({
        db: {
          select: vi.fn().mockReturnValue({ from: vi.fn().mockReturnValue({ where: vi.fn().mockReturnValue([{ id: '123', name: 'Test User' }]) }) })
        }
      }));
      ```
  - **Always mock axios calls**
    - Never allow real HTTP requests in tests.
    - Use mocking frameworks to replace axios with a mock implementation.
    - Example:
      ```typescript
      // ✅ DO: Mock axios
      vi.mock('axios', () => ({
        __esModule: true,
        default: {
          get: vi.fn(() => Promise.resolve({ data: {} })),
          post: vi.fn(() => Promise.resolve({ data: {} })),
        },
      }));
      ```
  - **Mock all other external dependencies**
    - Any service, API, or library that interacts with the outside world (e.g., file system, network, auth providers) must be mocked.
    - Example:
      ```typescript
      // ✅ DO: Mock fs
      vi.mock('fs', () => ({
        existsSync: vi.fn(() => true),
        mkdirSync: vi.fn(),
        unlinkSync: vi.fn(),
      }));
      ```
- **Never rely on real external services or state in tests**
  - Tests must be deterministic and isolated from the environment.
  - This ensures tests are fast, reliable, and safe to run in any environment.
description:
globs:
alwaysApply: false
---
