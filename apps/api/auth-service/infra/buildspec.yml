version: 0.2

phases:
  install:
    runtime-versions:
      nodejs: 18
    commands:
      - echo "Installing dependencies..."
      - npm ci --production=false
      - echo "Installing AWS CLI..."
      - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
      - unzip awscliv2.zip
      - sudo ./aws/install
      - aws --version

  pre_build:
    commands:
      - echo "Setting up environment..."
      - echo "Build started on `date`"
      - echo "Working directory: $CODEBUILD_SRC_DIR"
      - echo "Build ID: $CODEBUILD_BUILD_ID"
      - echo "Build Number: $CODEBUILD_BUILD_NUMBER"
      - echo "Branch: $CODEBUILD_WEBHOOK_HEAD_REF"
      - echo "Commit: $CODEBUILD_RESOLVED_SOURCE_VERSION"
      
      # Set environment based on branch
      - |
        if [[ "$CODEBUILD_WEBHOOK_HEAD_REF" == "main" || "$CODEBUILD_WEBHOOK_HEAD_REF" == "master" ]]; then
          export ENVIRONMENT="prod"
        elif [[ "$CODEBUILD_WEBHOOK_HEAD_REF" == "staging" ]]; then
          export ENVIRONMENT="staging"
        else
          export ENVIRONMENT="dev"
        fi
      
      - echo "Environment: $ENVIRONMENT"
      
      # Create build artifacts directory
      - mkdir -p build
      - mkdir -p build/infra
      - mkdir -p build/src

  build:
    commands:
      - echo "Building TypeScript..."
      - npm run build
      
      - echo "Running tests..."
      - npm test
      
      - echo "Linting code..."
      - npm run lint
      
      - echo "Copying source files..."
      - cp -r src/* build/src/
      - cp -r infra/* build/infra/
      - cp package*.json build/
      - cp tsconfig.json build/
      - cp vitest.config.ts build/
      - cp .env.example build/
      
      - echo "Creating deployment package..."
      - cd build
      - zip -r ../auth-service-$ENVIRONMENT.zip .
      - cd ..
      
      - echo "Validating CloudFormation template..."
      - aws cloudformation validate-template --template-body file://infra/auth-service-cloudformation.yml

  post_build:
    commands:
      - echo "Build completed on `date`"
      - echo "Environment: $ENVIRONMENT"
      - echo "Build artifacts created successfully"
      
      # Create build artifacts for CodePipeline
      - echo "Creating build artifacts..."
      - echo $ENVIRONMENT > environment.txt
      - echo $CODEBUILD_RESOLVED_SOURCE_VERSION > version.txt
      - echo $CODEBUILD_BUILD_ID > build-id.txt
      
      # Create parameter files for different environments
      - |
        cat > params-dev.json << EOF
        {
          "Parameters": {
            "Environment": "dev",
            "ProjectName": "auth-service",
            "DomainName": "",
            "CertificateArn": ""
          }
        }
        EOF
      
      - |
        cat > params-staging.json << EOF
        {
          "Parameters": {
            "Environment": "staging",
            "ProjectName": "auth-service",
            "DomainName": "",
            "CertificateArn": ""
          }
        }
        EOF
      
      - |
        cat > params-prod.json << EOF
        {
          "Parameters": {
            "Environment": "prod",
            "ProjectName": "auth-service",
            "DomainName": "",
            "CertificateArn": ""
          }
        }
        EOF

artifacts:
  files:
    - auth-service-*.zip
    - environment.txt
    - version.txt
    - build-id.txt
    - params-*.json
    - build/infra/*
    - build/src/*
    - build/package*.json
    - build/tsconfig.json
    - build/vitest.config.ts
    - build/.env.example
  discard-paths: no

cache:
  paths:
    - 'node_modules/**/*' 