AWSTemplateFormatVersion: '2010-09-09'
Description: 'Auth Service CI/CD Pipeline - CodePipeline with CodeBuild and CloudFormation Deployment'

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
    Description: Environment name
  
  ProjectName:
    Type: String
    Default: auth-service
    Description: Project name for resource naming
  
  GitHubOwner:
    Type: String
    Description: GitHub repository owner
  
  GitHubRepo:
    Type: String
    Description: GitHub repository name
  
  GitHubBranch:
    Type: String
    Default: main
    Description: GitHub branch to monitor
  
  GitHubToken:
    Type: String
    NoEcho: true
    Description: GitHub personal access token
  
  ArtifactBucketName:
    Type: String
    Description: S3 bucket name for pipeline artifacts
  
  NotificationEmail:
    Type: String
    Description: Email address for pipeline notifications

Globals:
  Function:
    Timeout: 30
    Runtime: nodejs18.x

Resources:
  # S3 Bucket for Pipeline Artifacts
  ArtifactBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref ArtifactBucketName
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldArtifacts
            Status: Enabled
            ExpirationInDays: 30
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # CodeBuild Service Role
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-codebuild-role-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:PutObject
                  - s3:DeleteObject
                Resource: 
                  - !Sub '${ArtifactBucket}/*'
                  - !Sub '${ArtifactBucket}'
        - PolicyName: CloudFormationAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cloudformation:*
                Resource: '*'
        - PolicyName: LambdaAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:*
                Resource: '*'
        - PolicyName: IAMAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - iam:PassRole
                  - iam:CreateRole
                  - iam:DeleteRole
                  - iam:GetRole
                  - iam:PutRolePolicy
                  - iam:DeleteRolePolicy
                  - iam:AttachRolePolicy
                  - iam:DetachRolePolicy
                Resource: '*'
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:*
                Resource: '*'
        - PolicyName: ApiGatewayAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - apigateway:*
                Resource: '*'
        - PolicyName: KMSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - kms:*
                Resource: '*'
        - PolicyName: WAFAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - wafv2:*
                Resource: '*'
        - PolicyName: CloudWatchAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:*
                Resource: '*'
        - PolicyName: SNSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sns:*
                Resource: '*'
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # CodeBuild Project
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub '${ProjectName}-build-${Environment}'
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:4.0
        EnvironmentVariables:
          - Name: ENVIRONMENT
            Value: !Ref Environment
          - Name: PROJECT_NAME
            Value: !Ref ProjectName
      Source:
        Type: CODEPIPELINE
        BuildSpec: buildspec.yml
      Cache:
        Type: S3
        Location: !Sub '${ArtifactBucket}/build-cache'
      LogsConfig:
        CloudWatchLogs:
          Status: ENABLED
          GroupName: !Sub '/aws/codebuild/${ProjectName}-${Environment}'
        S3Logs:
          Status: ENABLED
          Location: !Sub '${ArtifactBucket}/build-logs'
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # CodePipeline Service Role
  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-codepipeline-role-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodePipelineFullAccess
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:PutObject
                  - s3:DeleteObject
                Resource: 
                  - !Sub '${ArtifactBucket}/*'
                  - !Sub '${ArtifactBucket}'
        - PolicyName: CodeBuildAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                Resource: !GetAtt CodeBuildProject.Arn
        - PolicyName: CloudFormationAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cloudformation:*
                Resource: '*'
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # CodePipeline
  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub '${ProjectName}-pipeline-${Environment}'
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactBucket
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: '1'
              Configuration:
                Owner: !Ref GitHubOwner
                Repo: !Ref GitHubRepo
                Branch: !Ref GitHubBranch
                OAuthToken: !Ref GitHubToken
              OutputArtifacts:
                - Name: SourceCode
              RunOrder: 1
        
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              Configuration:
                ProjectName: !Ref CodeBuildProject
              InputArtifacts:
                - Name: SourceCode
              OutputArtifacts:
                - Name: BuildArtifacts
              RunOrder: 1
        
        - Name: Deploy
          Actions:
            - Name: DeployInfrastructure
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              Configuration:
                ActionMode: CREATE_UPDATE
                StackName: !Sub '${ProjectName}-infrastructure-${Environment}'
                TemplatePath: BuildArtifacts::build/infra/auth-service-cloudformation.yml
                ParameterOverrides: !Sub |
                  {
                    "Environment": "${Environment}",
                    "ProjectName": "${ProjectName}",
                    "DomainName": "",
                    "CertificateArn": ""
                  }
                Capabilities: CAPABILITY_NAMED_IAM
                RoleArn: !GetAtt CloudFormationServiceRole.Arn
              InputArtifacts:
                - Name: BuildArtifacts
              RunOrder: 1
              
            - Name: DeployLambdaFunctions
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              Configuration:
                ActionMode: CREATE_UPDATE
                StackName: !Sub '${ProjectName}-lambda-${Environment}'
                TemplatePath: BuildArtifacts::build/infra/lambda-deployment.yml
                ParameterOverrides: !Sub |
                  {
                    "Environment": "${Environment}",
                    "ProjectName": "${ProjectName}",
                    "BuildArtifacts": "BuildArtifacts"
                  }
                Capabilities: CAPABILITY_NAMED_IAM
                RoleArn: !GetAtt CloudFormationServiceRole.Arn
              InputArtifacts:
                - Name: BuildArtifacts
              RunOrder: 2
      
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # CloudFormation Service Role for Pipeline
  CloudFormationServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-cloudformation-role-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # SNS Topic for Pipeline Notifications
  PipelineNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub '${ProjectName}-pipeline-notifications-${Environment}'
      DisplayName: !Sub '${ProjectName} Pipeline Notifications ${Environment}'

  # SNS Topic Policy
  PipelineNotificationTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref PipelineNotificationTopic
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sns:Publish
            Resource: !Ref PipelineNotificationTopic

  # SNS Subscription
  PipelineNotificationSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref PipelineNotificationTopic
      Protocol: email
      Endpoint: !Ref NotificationEmail

  # CloudWatch Event Rule for Pipeline State Changes
  PipelineStateChangeRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub '${ProjectName}-pipeline-state-change-${Environment}'
      Description: 'Capture CodePipeline state changes'
      EventPattern: !Sub |
        {
          "source": ["aws.codepipeline"],
          "detail-type": ["CodePipeline Pipeline Execution State Change"],
          "detail": {
            "pipeline": ["${ProjectName}-pipeline-${Environment}"]
          }
        }
      State: ENABLED
      Targets:
        - Arn: !Ref PipelineNotificationTopic
          Id: PipelineNotifications

  # CloudWatch Event Rule Permission
  PipelineStateChangeRulePermission:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub '${ProjectName}-pipeline-permission-${Environment}'
      Description: 'Allow EventBridge to publish to SNS'
      EventPattern: !Sub |
        {
          "source": ["aws.codepipeline"],
          "detail-type": ["CodePipeline Pipeline Execution State Change"],
          "detail": {
            "pipeline": ["${ProjectName}-pipeline-${Environment}"]
          }
        }
      State: ENABLED
      Targets:
        - Arn: !Ref PipelineNotificationTopic
          Id: PipelineNotifications

  # Lambda Deployment Template
  LambdaDeploymentTemplate:
    Type: AWS::S3::Object
    Properties:
      Bucket: !Ref ArtifactBucket
      Key: lambda-deployment-template.yml
      ContentType: application/x-yaml
      Content: !Sub |
        AWSTemplateFormatVersion: '2010-09-09'
        Description: 'Lambda Functions Deployment Template'
        
        Parameters:
          Environment:
            Type: String
            Default: ${Environment}
          ProjectName:
            Type: String
            Default: ${ProjectName}
          BuildArtifacts:
            Type: String
            Default: BuildArtifacts
        
        Resources:
          # Lambda Functions will be deployed here
          # This is a placeholder template that will be expanded
          # with actual Lambda function definitions
        
        Outputs:
          DeploymentComplete:
            Description: 'Lambda deployment completed'
            Value: 'true'

  # CloudWatch Dashboard for Pipeline
  PipelineDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub '${ProjectName}-pipeline-dashboard-${Environment}'
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/CodeBuild", "BuildDuration", "ProjectName", "${ProjectName}-build-${Environment}" ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "CodeBuild Duration"
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/CodeBuild", "Builds", "ProjectName", "${ProjectName}-build-${Environment}" ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "CodeBuild Builds"
              }
            }
          ]
        }

Outputs:
  PipelineName:
    Description: 'CodePipeline Name'
    Value: !Ref CodePipeline
    Export:
      Name: !Sub '${ProjectName}-pipeline-name-${Environment}'

  BuildProjectName:
    Description: 'CodeBuild Project Name'
    Value: !Ref CodeBuildProject
    Export:
      Name: !Sub '${ProjectName}-build-project-name-${Environment}'

  ArtifactBucketName:
    Description: 'S3 Artifact Bucket Name'
    Value: !Ref ArtifactBucket
    Export:
      Name: !Sub '${ProjectName}-artifact-bucket-name-${Environment}'

  NotificationTopicArn:
    Description: 'SNS Topic ARN for Pipeline Notifications'
    Value: !Ref PipelineNotificationTopic
    Export:
      Name: !Sub '${ProjectName}-notification-topic-arn-${Environment}'

  PipelineUrl:
    Description: 'CodePipeline Console URL'
    Value: !Sub 'https://${AWS::Region}.console.aws.amazon.com/codesuite/codepipeline/pipelines/${CodePipeline}/view'
    Export:
      Name: !Sub '${ProjectName}-pipeline-url-${Environment}' 