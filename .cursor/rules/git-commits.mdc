---
description: Enforce Conventional Commits for all git commit messages (types, scopes, bodies, footers, and BREAKING CHANGE handling)
globs: **/*
alwaysApply: true
---

- **Commit Message Structure**
  - Format:
    ```
    <type>[optional scope]: <description>

    [optional body]

    [optional footer(s)]
    ```
  - Subject line:
    - Imperative mood (e.g., "add", "fix", "refactor"), lowercase
    - No trailing period
    - Keep under ~72 characters

- **Types (Allowed)**
  - `feat`: new feature (SemVer MINOR)
  - `fix`: bug fix (SemVer PATCH)
  - `docs`: documentation only changes
  - `style`: formatting, missing semi colons, etc.; no code change
  - `refactor`: code change that neither fixes a bug nor adds a feature
  - `perf`: performance improvement
  - `test`: add or update tests only
  - `build`: build system or external dependencies (e.g., npm, pnpm, vite, turbo)
  - `ci`: CI config or scripts (e.g., GitHub Actions)
  - `chore`: maintenance tasks that don't affect src or tests (e.g., bump meta, housekeeping)
  - `revert`: revert a previous commit
  - Note: Additional types are permitted if aligned with `@commitlint/config-conventional` guidelines

- **Scopes (Optional)**
  - Use a single, concrete scope in parentheses to specify the area affected:
    - Examples: `api`, `app`, `auth`, `ui`, `gallery`, `infra`, `docs`
    - Prefer package or feature names when relevant: `feat(auth): ...`, `fix(ui): ...`
  - Avoid overly broad scopes; split changes if multiple domains are affected

- **BREAKING CHANGES**
  - Indicate with a `!` after type or scope OR a `BREAKING CHANGE:` footer
  - Examples:
    - In subject: `feat(api)!: drop legacy auth endpoints`
    - In footer:
      ```
      BREAKING CHANGE: removed deprecated /v1 endpoints; consumers must migrate to /v2
      ```
  - Any breaking change implies a SemVer MAJOR increment

- **Body (Optional, Recommended for Non-Trivial Changes)**
  - Explain what and why (not just how)
  - Describe user-facing impact, migration steps, and alternative approaches considered
  - Use paragraphs or bullet points; wrap at ~72 characters per line when possible

- **Footers (Optional)**
  - `BREAKING CHANGE: <description>` — documents an API/behavior change
  - `Refs: #123` or `Closes: #123` — issue references/closure
  - `Reviewed-by: <name>` — review metadata (if applicable)
  - Multiple footers allowed; one per line

- **Examples**
  - Minimal feature:
    ```
    feat: add wishlist item removal
    ```
  - Feature with scope and body:
    ```
    feat(ui): add skeleton loaders for gallery

    Introduce shimmer skeletons for initial gallery load to improve
    perceived performance. Applies to grid and detail views.
    ```
  - Fix with reference:
    ```
    fix(moc-instructions): handle missing image variants

    Prevents runtime error when an instruction image variant is missing.
    Refs: #456
    ```
  - Breaking change via footer:
    ```
    refactor(api): consolidate /instructions endpoints

    Merge multiple listing endpoints into a single filtered endpoint.

    BREAKING CHANGE: removed /instructions/popular and /instructions/new.
    Use /instructions?sort=popular|new instead.
    ```
  - Revert:
    ```
    revert: feat(ui): add experimental theme switch

    Reverts commit abcdef1 due to regressions in dark mode tokens.
    ```

- **SemVer Mapping**
  - `feat` → MINOR, `fix` → PATCH, any `BREAKING CHANGE` → MAJOR
  - Other types have no direct SemVer implication unless marked breaking

- **Policy & Hygiene**
  - Prefer several small, focused commits over one monolith
  - Do not use `wip:`; create draft PRs or keep work local until coherent
  - Keep scope discipline; split changes if they cross unrelated areas
  - Use one BREAKING CHANGE per commit when possible with clear migration notes

- **Reference**
  - Conventional Commits: https://www.conventionalcommits.org/
  - See repository rule structure guidance: [cursor_rules.mdc](mdc:.cursor/rules/cursor_rules.mdc)
